/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SharedLayoutImport } from './routes/_sharedLayout'
import { Route as SharedLayoutIndexImport } from './routes/_sharedLayout/index'
import { Route as SharedLayoutProtectedImport } from './routes/_sharedLayout/_protected'
import { Route as SharedLayoutNestedLayoutImport } from './routes/_sharedLayout/_nested-layout'
import { Route as PublicLoginRouteImport } from './routes/_public/login/route'
import { Route as PublicAccessDeniedRouteImport } from './routes/_public/access-denied/route'
import { Route as SharedLayoutProtectedDeferredImport } from './routes/_sharedLayout/_protected/deferred'
import { Route as SharedLayoutNestedLayoutRouteBImport } from './routes/_sharedLayout/_nested-layout/route-b'
import { Route as SharedLayoutNestedLayoutRouteAImport } from './routes/_sharedLayout/_nested-layout/route-a'
import { Route as SharedLayoutProtectedUsersRouteImport } from './routes/_sharedLayout/_protected/users/route'
import { Route as SharedLayoutProtectedPostsRouteImport } from './routes/_sharedLayout/_protected/posts/route'
import { Route as SharedLayoutProtectedIncidentsRouteImport } from './routes/_sharedLayout/_protected/incidents/route'
import { Route as SharedLayoutProtectedUsersIndexImport } from './routes/_sharedLayout/_protected/users/index'
import { Route as SharedLayoutProtectedTodoIndexImport } from './routes/_sharedLayout/_protected/todo/index'
import { Route as SharedLayoutProtectedPostsIndexImport } from './routes/_sharedLayout/_protected/posts/index'
import { Route as SharedLayoutProtectedUsersUserIdIndexImport } from './routes/_sharedLayout/_protected/users/$userId/index'
import { Route as SharedLayoutProtectedPostsPostIdIndexImport } from './routes/_sharedLayout/_protected/posts/$postId/index'
import { Route as SharedLayoutProtectedPostsPostIdDeepImport } from './routes/_sharedLayout/_protected/posts/_.$postId.deep'

// Create/Update Routes

const SharedLayoutRoute = SharedLayoutImport.update({
  id: '/_sharedLayout',
  getParentRoute: () => rootRoute,
} as any)

const SharedLayoutIndexRoute = SharedLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SharedLayoutRoute,
} as any)

const SharedLayoutProtectedRoute = SharedLayoutProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => SharedLayoutRoute,
} as any)

const SharedLayoutNestedLayoutRoute = SharedLayoutNestedLayoutImport.update({
  id: '/_nested-layout',
  getParentRoute: () => SharedLayoutRoute,
} as any)

const PublicLoginRouteRoute = PublicLoginRouteImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PublicAccessDeniedRouteRoute = PublicAccessDeniedRouteImport.update({
  id: '/_public/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRoute,
} as any)

const SharedLayoutProtectedDeferredRoute =
  SharedLayoutProtectedDeferredImport.update({
    id: '/deferred',
    path: '/deferred',
    getParentRoute: () => SharedLayoutProtectedRoute,
  } as any)

const SharedLayoutNestedLayoutRouteBRoute =
  SharedLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => SharedLayoutNestedLayoutRoute,
  } as any)

const SharedLayoutNestedLayoutRouteARoute =
  SharedLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => SharedLayoutNestedLayoutRoute,
  } as any)

const SharedLayoutProtectedUsersRouteRoute =
  SharedLayoutProtectedUsersRouteImport.update({
    id: '/users',
    path: '/users',
    getParentRoute: () => SharedLayoutProtectedRoute,
  } as any)

const SharedLayoutProtectedPostsRouteRoute =
  SharedLayoutProtectedPostsRouteImport.update({
    id: '/posts',
    path: '/posts',
    getParentRoute: () => SharedLayoutProtectedRoute,
  } as any)

const SharedLayoutProtectedIncidentsRouteRoute =
  SharedLayoutProtectedIncidentsRouteImport.update({
    id: '/incidents',
    path: '/incidents',
    getParentRoute: () => SharedLayoutProtectedRoute,
  } as any)

const SharedLayoutProtectedUsersIndexRoute =
  SharedLayoutProtectedUsersIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SharedLayoutProtectedUsersRouteRoute,
  } as any)

const SharedLayoutProtectedTodoIndexRoute =
  SharedLayoutProtectedTodoIndexImport.update({
    id: '/todo/',
    path: '/todo/',
    getParentRoute: () => SharedLayoutProtectedRoute,
  } as any)

const SharedLayoutProtectedPostsIndexRoute =
  SharedLayoutProtectedPostsIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SharedLayoutProtectedPostsRouteRoute,
  } as any)

const SharedLayoutProtectedUsersUserIdIndexRoute =
  SharedLayoutProtectedUsersUserIdIndexImport.update({
    id: '/$userId/',
    path: '/$userId/',
    getParentRoute: () => SharedLayoutProtectedUsersRouteRoute,
  } as any)

const SharedLayoutProtectedPostsPostIdIndexRoute =
  SharedLayoutProtectedPostsPostIdIndexImport.update({
    id: '/$postId/',
    path: '/$postId/',
    getParentRoute: () => SharedLayoutProtectedPostsRouteRoute,
  } as any)

const SharedLayoutProtectedPostsPostIdDeepRoute =
  SharedLayoutProtectedPostsPostIdDeepImport.update({
    id: '/_/$postId/deep',
    path: '/$postId/deep',
    getParentRoute: () => SharedLayoutProtectedPostsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_sharedLayout': {
      id: '/_sharedLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SharedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public/access-denied': {
      id: '/_public/access-denied'
      path: '/access-denied'
      fullPath: '/access-denied'
      preLoaderRoute: typeof PublicAccessDeniedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_sharedLayout/_nested-layout': {
      id: '/_sharedLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SharedLayoutNestedLayoutImport
      parentRoute: typeof SharedLayoutImport
    }
    '/_sharedLayout/_protected': {
      id: '/_sharedLayout/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SharedLayoutProtectedImport
      parentRoute: typeof SharedLayoutImport
    }
    '/_sharedLayout/': {
      id: '/_sharedLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SharedLayoutIndexImport
      parentRoute: typeof SharedLayoutImport
    }
    '/_sharedLayout/_protected/incidents': {
      id: '/_sharedLayout/_protected/incidents'
      path: '/incidents'
      fullPath: '/incidents'
      preLoaderRoute: typeof SharedLayoutProtectedIncidentsRouteImport
      parentRoute: typeof SharedLayoutProtectedImport
    }
    '/_sharedLayout/_protected/posts': {
      id: '/_sharedLayout/_protected/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof SharedLayoutProtectedPostsRouteImport
      parentRoute: typeof SharedLayoutProtectedImport
    }
    '/_sharedLayout/_protected/users': {
      id: '/_sharedLayout/_protected/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof SharedLayoutProtectedUsersRouteImport
      parentRoute: typeof SharedLayoutProtectedImport
    }
    '/_sharedLayout/_nested-layout/route-a': {
      id: '/_sharedLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof SharedLayoutNestedLayoutRouteAImport
      parentRoute: typeof SharedLayoutNestedLayoutImport
    }
    '/_sharedLayout/_nested-layout/route-b': {
      id: '/_sharedLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof SharedLayoutNestedLayoutRouteBImport
      parentRoute: typeof SharedLayoutNestedLayoutImport
    }
    '/_sharedLayout/_protected/deferred': {
      id: '/_sharedLayout/_protected/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof SharedLayoutProtectedDeferredImport
      parentRoute: typeof SharedLayoutProtectedImport
    }
    '/_sharedLayout/_protected/posts/': {
      id: '/_sharedLayout/_protected/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof SharedLayoutProtectedPostsIndexImport
      parentRoute: typeof SharedLayoutProtectedPostsRouteImport
    }
    '/_sharedLayout/_protected/todo/': {
      id: '/_sharedLayout/_protected/todo/'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof SharedLayoutProtectedTodoIndexImport
      parentRoute: typeof SharedLayoutProtectedImport
    }
    '/_sharedLayout/_protected/users/': {
      id: '/_sharedLayout/_protected/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof SharedLayoutProtectedUsersIndexImport
      parentRoute: typeof SharedLayoutProtectedUsersRouteImport
    }
    '/_sharedLayout/_protected/posts/$postId/': {
      id: '/_sharedLayout/_protected/posts/$postId/'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof SharedLayoutProtectedPostsPostIdIndexImport
      parentRoute: typeof SharedLayoutProtectedPostsRouteImport
    }
    '/_sharedLayout/_protected/users/$userId/': {
      id: '/_sharedLayout/_protected/users/$userId/'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof SharedLayoutProtectedUsersUserIdIndexImport
      parentRoute: typeof SharedLayoutProtectedUsersRouteImport
    }
    '/_sharedLayout/_protected/posts/_/$postId/deep': {
      id: '/_sharedLayout/_protected/posts/_/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof SharedLayoutProtectedPostsPostIdDeepImport
      parentRoute: typeof SharedLayoutProtectedPostsRouteImport
    }
  }
}

// Create and export the route tree

interface SharedLayoutNestedLayoutRouteChildren {
  SharedLayoutNestedLayoutRouteARoute: typeof SharedLayoutNestedLayoutRouteARoute
  SharedLayoutNestedLayoutRouteBRoute: typeof SharedLayoutNestedLayoutRouteBRoute
}

const SharedLayoutNestedLayoutRouteChildren: SharedLayoutNestedLayoutRouteChildren =
  {
    SharedLayoutNestedLayoutRouteARoute: SharedLayoutNestedLayoutRouteARoute,
    SharedLayoutNestedLayoutRouteBRoute: SharedLayoutNestedLayoutRouteBRoute,
  }

const SharedLayoutNestedLayoutRouteWithChildren =
  SharedLayoutNestedLayoutRoute._addFileChildren(
    SharedLayoutNestedLayoutRouteChildren,
  )

interface SharedLayoutProtectedPostsRouteRouteChildren {
  SharedLayoutProtectedPostsIndexRoute: typeof SharedLayoutProtectedPostsIndexRoute
  SharedLayoutProtectedPostsPostIdIndexRoute: typeof SharedLayoutProtectedPostsPostIdIndexRoute
  SharedLayoutProtectedPostsPostIdDeepRoute: typeof SharedLayoutProtectedPostsPostIdDeepRoute
}

const SharedLayoutProtectedPostsRouteRouteChildren: SharedLayoutProtectedPostsRouteRouteChildren =
  {
    SharedLayoutProtectedPostsIndexRoute: SharedLayoutProtectedPostsIndexRoute,
    SharedLayoutProtectedPostsPostIdIndexRoute:
      SharedLayoutProtectedPostsPostIdIndexRoute,
    SharedLayoutProtectedPostsPostIdDeepRoute:
      SharedLayoutProtectedPostsPostIdDeepRoute,
  }

const SharedLayoutProtectedPostsRouteRouteWithChildren =
  SharedLayoutProtectedPostsRouteRoute._addFileChildren(
    SharedLayoutProtectedPostsRouteRouteChildren,
  )

interface SharedLayoutProtectedUsersRouteRouteChildren {
  SharedLayoutProtectedUsersIndexRoute: typeof SharedLayoutProtectedUsersIndexRoute
  SharedLayoutProtectedUsersUserIdIndexRoute: typeof SharedLayoutProtectedUsersUserIdIndexRoute
}

const SharedLayoutProtectedUsersRouteRouteChildren: SharedLayoutProtectedUsersRouteRouteChildren =
  {
    SharedLayoutProtectedUsersIndexRoute: SharedLayoutProtectedUsersIndexRoute,
    SharedLayoutProtectedUsersUserIdIndexRoute:
      SharedLayoutProtectedUsersUserIdIndexRoute,
  }

const SharedLayoutProtectedUsersRouteRouteWithChildren =
  SharedLayoutProtectedUsersRouteRoute._addFileChildren(
    SharedLayoutProtectedUsersRouteRouteChildren,
  )

interface SharedLayoutProtectedRouteChildren {
  SharedLayoutProtectedIncidentsRouteRoute: typeof SharedLayoutProtectedIncidentsRouteRoute
  SharedLayoutProtectedPostsRouteRoute: typeof SharedLayoutProtectedPostsRouteRouteWithChildren
  SharedLayoutProtectedUsersRouteRoute: typeof SharedLayoutProtectedUsersRouteRouteWithChildren
  SharedLayoutProtectedDeferredRoute: typeof SharedLayoutProtectedDeferredRoute
  SharedLayoutProtectedTodoIndexRoute: typeof SharedLayoutProtectedTodoIndexRoute
}

const SharedLayoutProtectedRouteChildren: SharedLayoutProtectedRouteChildren = {
  SharedLayoutProtectedIncidentsRouteRoute:
    SharedLayoutProtectedIncidentsRouteRoute,
  SharedLayoutProtectedPostsRouteRoute:
    SharedLayoutProtectedPostsRouteRouteWithChildren,
  SharedLayoutProtectedUsersRouteRoute:
    SharedLayoutProtectedUsersRouteRouteWithChildren,
  SharedLayoutProtectedDeferredRoute: SharedLayoutProtectedDeferredRoute,
  SharedLayoutProtectedTodoIndexRoute: SharedLayoutProtectedTodoIndexRoute,
}

const SharedLayoutProtectedRouteWithChildren =
  SharedLayoutProtectedRoute._addFileChildren(
    SharedLayoutProtectedRouteChildren,
  )

interface SharedLayoutRouteChildren {
  SharedLayoutNestedLayoutRoute: typeof SharedLayoutNestedLayoutRouteWithChildren
  SharedLayoutProtectedRoute: typeof SharedLayoutProtectedRouteWithChildren
  SharedLayoutIndexRoute: typeof SharedLayoutIndexRoute
}

const SharedLayoutRouteChildren: SharedLayoutRouteChildren = {
  SharedLayoutNestedLayoutRoute: SharedLayoutNestedLayoutRouteWithChildren,
  SharedLayoutProtectedRoute: SharedLayoutProtectedRouteWithChildren,
  SharedLayoutIndexRoute: SharedLayoutIndexRoute,
}

const SharedLayoutRouteWithChildren = SharedLayoutRoute._addFileChildren(
  SharedLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof SharedLayoutProtectedRouteWithChildren
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '/': typeof SharedLayoutIndexRoute
  '/incidents': typeof SharedLayoutProtectedIncidentsRouteRoute
  '/posts': typeof SharedLayoutProtectedPostsRouteRouteWithChildren
  '/users': typeof SharedLayoutProtectedUsersRouteRouteWithChildren
  '/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/deferred': typeof SharedLayoutProtectedDeferredRoute
  '/posts/': typeof SharedLayoutProtectedPostsIndexRoute
  '/todo': typeof SharedLayoutProtectedTodoIndexRoute
  '/users/': typeof SharedLayoutProtectedUsersIndexRoute
  '/posts/$postId': typeof SharedLayoutProtectedPostsPostIdIndexRoute
  '/users/$userId': typeof SharedLayoutProtectedUsersUserIdIndexRoute
  '/posts/$postId/deep': typeof SharedLayoutProtectedPostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '': typeof SharedLayoutProtectedRouteWithChildren
  '/': typeof SharedLayoutIndexRoute
  '/incidents': typeof SharedLayoutProtectedIncidentsRouteRoute
  '/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/deferred': typeof SharedLayoutProtectedDeferredRoute
  '/posts': typeof SharedLayoutProtectedPostsIndexRoute
  '/todo': typeof SharedLayoutProtectedTodoIndexRoute
  '/users': typeof SharedLayoutProtectedUsersIndexRoute
  '/posts/$postId': typeof SharedLayoutProtectedPostsPostIdIndexRoute
  '/users/$userId': typeof SharedLayoutProtectedUsersUserIdIndexRoute
  '/posts/$postId/deep': typeof SharedLayoutProtectedPostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_sharedLayout': typeof SharedLayoutRouteWithChildren
  '/_public/access-denied': typeof PublicAccessDeniedRouteRoute
  '/_public/login': typeof PublicLoginRouteRoute
  '/_sharedLayout/_nested-layout': typeof SharedLayoutNestedLayoutRouteWithChildren
  '/_sharedLayout/_protected': typeof SharedLayoutProtectedRouteWithChildren
  '/_sharedLayout/': typeof SharedLayoutIndexRoute
  '/_sharedLayout/_protected/incidents': typeof SharedLayoutProtectedIncidentsRouteRoute
  '/_sharedLayout/_protected/posts': typeof SharedLayoutProtectedPostsRouteRouteWithChildren
  '/_sharedLayout/_protected/users': typeof SharedLayoutProtectedUsersRouteRouteWithChildren
  '/_sharedLayout/_nested-layout/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/_sharedLayout/_nested-layout/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/_sharedLayout/_protected/deferred': typeof SharedLayoutProtectedDeferredRoute
  '/_sharedLayout/_protected/posts/': typeof SharedLayoutProtectedPostsIndexRoute
  '/_sharedLayout/_protected/todo/': typeof SharedLayoutProtectedTodoIndexRoute
  '/_sharedLayout/_protected/users/': typeof SharedLayoutProtectedUsersIndexRoute
  '/_sharedLayout/_protected/posts/$postId/': typeof SharedLayoutProtectedPostsPostIdIndexRoute
  '/_sharedLayout/_protected/users/$userId/': typeof SharedLayoutProtectedUsersUserIdIndexRoute
  '/_sharedLayout/_protected/posts/_/$postId/deep': typeof SharedLayoutProtectedPostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/access-denied'
    | '/login'
    | '/'
    | '/incidents'
    | '/posts'
    | '/users'
    | '/route-a'
    | '/route-b'
    | '/deferred'
    | '/posts/'
    | '/todo'
    | '/users/'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/access-denied'
    | '/login'
    | ''
    | '/'
    | '/incidents'
    | '/route-a'
    | '/route-b'
    | '/deferred'
    | '/posts'
    | '/todo'
    | '/users'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/_sharedLayout'
    | '/_public/access-denied'
    | '/_public/login'
    | '/_sharedLayout/_nested-layout'
    | '/_sharedLayout/_protected'
    | '/_sharedLayout/'
    | '/_sharedLayout/_protected/incidents'
    | '/_sharedLayout/_protected/posts'
    | '/_sharedLayout/_protected/users'
    | '/_sharedLayout/_nested-layout/route-a'
    | '/_sharedLayout/_nested-layout/route-b'
    | '/_sharedLayout/_protected/deferred'
    | '/_sharedLayout/_protected/posts/'
    | '/_sharedLayout/_protected/todo/'
    | '/_sharedLayout/_protected/users/'
    | '/_sharedLayout/_protected/posts/$postId/'
    | '/_sharedLayout/_protected/users/$userId/'
    | '/_sharedLayout/_protected/posts/_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SharedLayoutRoute: typeof SharedLayoutRouteWithChildren
  PublicAccessDeniedRouteRoute: typeof PublicAccessDeniedRouteRoute
  PublicLoginRouteRoute: typeof PublicLoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  SharedLayoutRoute: SharedLayoutRouteWithChildren,
  PublicAccessDeniedRouteRoute: PublicAccessDeniedRouteRoute,
  PublicLoginRouteRoute: PublicLoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_sharedLayout",
        "/_public/access-denied",
        "/_public/login"
      ]
    },
    "/_sharedLayout": {
      "filePath": "_sharedLayout.tsx",
      "children": [
        "/_sharedLayout/_nested-layout",
        "/_sharedLayout/_protected",
        "/_sharedLayout/"
      ]
    },
    "/_public/access-denied": {
      "filePath": "_public/access-denied/route.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login/route.tsx"
    },
    "/_sharedLayout/_nested-layout": {
      "filePath": "_sharedLayout/_nested-layout.tsx",
      "parent": "/_sharedLayout",
      "children": [
        "/_sharedLayout/_nested-layout/route-a",
        "/_sharedLayout/_nested-layout/route-b"
      ]
    },
    "/_sharedLayout/_protected": {
      "filePath": "_sharedLayout/_protected.tsx",
      "parent": "/_sharedLayout",
      "children": [
        "/_sharedLayout/_protected/incidents",
        "/_sharedLayout/_protected/posts",
        "/_sharedLayout/_protected/users",
        "/_sharedLayout/_protected/deferred",
        "/_sharedLayout/_protected/todo/"
      ]
    },
    "/_sharedLayout/": {
      "filePath": "_sharedLayout/index.tsx",
      "parent": "/_sharedLayout"
    },
    "/_sharedLayout/_protected/incidents": {
      "filePath": "_sharedLayout/_protected/incidents/route.tsx",
      "parent": "/_sharedLayout/_protected"
    },
    "/_sharedLayout/_protected/posts": {
      "filePath": "_sharedLayout/_protected/posts/route.tsx",
      "parent": "/_sharedLayout/_protected",
      "children": [
        "/_sharedLayout/_protected/posts/",
        "/_sharedLayout/_protected/posts/$postId/",
        "/_sharedLayout/_protected/posts/_/$postId/deep"
      ]
    },
    "/_sharedLayout/_protected/users": {
      "filePath": "_sharedLayout/_protected/users/route.tsx",
      "parent": "/_sharedLayout/_protected",
      "children": [
        "/_sharedLayout/_protected/users/",
        "/_sharedLayout/_protected/users/$userId/"
      ]
    },
    "/_sharedLayout/_nested-layout/route-a": {
      "filePath": "_sharedLayout/_nested-layout/route-a.tsx",
      "parent": "/_sharedLayout/_nested-layout"
    },
    "/_sharedLayout/_nested-layout/route-b": {
      "filePath": "_sharedLayout/_nested-layout/route-b.tsx",
      "parent": "/_sharedLayout/_nested-layout"
    },
    "/_sharedLayout/_protected/deferred": {
      "filePath": "_sharedLayout/_protected/deferred.tsx",
      "parent": "/_sharedLayout/_protected"
    },
    "/_sharedLayout/_protected/posts/": {
      "filePath": "_sharedLayout/_protected/posts/index.tsx",
      "parent": "/_sharedLayout/_protected/posts"
    },
    "/_sharedLayout/_protected/todo/": {
      "filePath": "_sharedLayout/_protected/todo/index.tsx",
      "parent": "/_sharedLayout/_protected"
    },
    "/_sharedLayout/_protected/users/": {
      "filePath": "_sharedLayout/_protected/users/index.tsx",
      "parent": "/_sharedLayout/_protected/users"
    },
    "/_sharedLayout/_protected/posts/$postId/": {
      "filePath": "_sharedLayout/_protected/posts/$postId/index.tsx",
      "parent": "/_sharedLayout/_protected/posts"
    },
    "/_sharedLayout/_protected/users/$userId/": {
      "filePath": "_sharedLayout/_protected/users/$userId/index.tsx",
      "parent": "/_sharedLayout/_protected/users"
    },
    "/_sharedLayout/_protected/posts/_/$postId/deep": {
      "filePath": "_sharedLayout/_protected/posts/_.$postId.deep.tsx",
      "parent": "/_sharedLayout/_protected/posts"
    }
  }
}
ROUTE_MANIFEST_END */
