/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SharedLayoutImport } from './routes/_sharedLayout'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as SharedLayoutNestedLayoutImport } from './routes/_sharedLayout/_nested-layout'
import { Route as ProtectedDeferredImport } from './routes/_protected/deferred'
import { Route as PublicLoginRouteImport } from './routes/_public/login/route'
import { Route as PublicAccessDeniedRouteImport } from './routes/_public/access-denied/route'
import { Route as ProtectedUsersRouteImport } from './routes/_protected/users/route'
import { Route as ProtectedLiveRouteImport } from './routes/_protected/live/route'
import { Route as ProtectedIncidentsRouteImport } from './routes/_protected/incidents/route'
import { Route as ProtectedUsersIndexImport } from './routes/_protected/users/index'
import { Route as SharedLayoutNestedLayoutRouteBImport } from './routes/_sharedLayout/_nested-layout/route-b'
import { Route as SharedLayoutNestedLayoutRouteAImport } from './routes/_sharedLayout/_nested-layout/route-a'
import { Route as ProtectedUsersUserIdIndexImport } from './routes/_protected/users/$userId/index'

// Create/Update Routes

const SharedLayoutRoute = SharedLayoutImport.update({
  id: '/_sharedLayout',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const SharedLayoutNestedLayoutRoute = SharedLayoutNestedLayoutImport.update({
  id: '/_nested-layout',
  getParentRoute: () => SharedLayoutRoute,
} as any)

const ProtectedDeferredRoute = ProtectedDeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => ProtectedRoute,
} as any)

const PublicLoginRouteRoute = PublicLoginRouteImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PublicAccessDeniedRouteRoute = PublicAccessDeniedRouteImport.update({
  id: '/_public/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedUsersRouteRoute = ProtectedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLiveRouteRoute = ProtectedLiveRouteImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedIncidentsRouteRoute = ProtectedIncidentsRouteImport.update({
  id: '/incidents',
  path: '/incidents',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedUsersIndexRoute = ProtectedUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedUsersRouteRoute,
} as any)

const SharedLayoutNestedLayoutRouteBRoute =
  SharedLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => SharedLayoutNestedLayoutRoute,
  } as any)

const SharedLayoutNestedLayoutRouteARoute =
  SharedLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => SharedLayoutNestedLayoutRoute,
  } as any)

const ProtectedUsersUserIdIndexRoute = ProtectedUsersUserIdIndexImport.update({
  id: '/$userId/',
  path: '/$userId/',
  getParentRoute: () => ProtectedUsersRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_sharedLayout': {
      id: '/_sharedLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SharedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected/incidents': {
      id: '/_protected/incidents'
      path: '/incidents'
      fullPath: '/incidents'
      preLoaderRoute: typeof ProtectedIncidentsRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/live': {
      id: '/_protected/live'
      path: '/live'
      fullPath: '/live'
      preLoaderRoute: typeof ProtectedLiveRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/users': {
      id: '/_protected/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ProtectedUsersRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/access-denied': {
      id: '/_public/access-denied'
      path: '/access-denied'
      fullPath: '/access-denied'
      preLoaderRoute: typeof PublicAccessDeniedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/deferred': {
      id: '/_protected/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof ProtectedDeferredImport
      parentRoute: typeof ProtectedImport
    }
    '/_sharedLayout/_nested-layout': {
      id: '/_sharedLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SharedLayoutNestedLayoutImport
      parentRoute: typeof SharedLayoutImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_sharedLayout/_nested-layout/route-a': {
      id: '/_sharedLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof SharedLayoutNestedLayoutRouteAImport
      parentRoute: typeof SharedLayoutNestedLayoutImport
    }
    '/_sharedLayout/_nested-layout/route-b': {
      id: '/_sharedLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof SharedLayoutNestedLayoutRouteBImport
      parentRoute: typeof SharedLayoutNestedLayoutImport
    }
    '/_protected/users/': {
      id: '/_protected/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof ProtectedUsersIndexImport
      parentRoute: typeof ProtectedUsersRouteImport
    }
    '/_protected/users/$userId/': {
      id: '/_protected/users/$userId/'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof ProtectedUsersUserIdIndexImport
      parentRoute: typeof ProtectedUsersRouteImport
    }
  }
}

// Create and export the route tree

interface ProtectedUsersRouteRouteChildren {
  ProtectedUsersIndexRoute: typeof ProtectedUsersIndexRoute
  ProtectedUsersUserIdIndexRoute: typeof ProtectedUsersUserIdIndexRoute
}

const ProtectedUsersRouteRouteChildren: ProtectedUsersRouteRouteChildren = {
  ProtectedUsersIndexRoute: ProtectedUsersIndexRoute,
  ProtectedUsersUserIdIndexRoute: ProtectedUsersUserIdIndexRoute,
}

const ProtectedUsersRouteRouteWithChildren =
  ProtectedUsersRouteRoute._addFileChildren(ProtectedUsersRouteRouteChildren)

interface ProtectedRouteChildren {
  ProtectedIncidentsRouteRoute: typeof ProtectedIncidentsRouteRoute
  ProtectedLiveRouteRoute: typeof ProtectedLiveRouteRoute
  ProtectedUsersRouteRoute: typeof ProtectedUsersRouteRouteWithChildren
  ProtectedDeferredRoute: typeof ProtectedDeferredRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIncidentsRouteRoute: ProtectedIncidentsRouteRoute,
  ProtectedLiveRouteRoute: ProtectedLiveRouteRoute,
  ProtectedUsersRouteRoute: ProtectedUsersRouteRouteWithChildren,
  ProtectedDeferredRoute: ProtectedDeferredRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface SharedLayoutNestedLayoutRouteChildren {
  SharedLayoutNestedLayoutRouteARoute: typeof SharedLayoutNestedLayoutRouteARoute
  SharedLayoutNestedLayoutRouteBRoute: typeof SharedLayoutNestedLayoutRouteBRoute
}

const SharedLayoutNestedLayoutRouteChildren: SharedLayoutNestedLayoutRouteChildren =
  {
    SharedLayoutNestedLayoutRouteARoute: SharedLayoutNestedLayoutRouteARoute,
    SharedLayoutNestedLayoutRouteBRoute: SharedLayoutNestedLayoutRouteBRoute,
  }

const SharedLayoutNestedLayoutRouteWithChildren =
  SharedLayoutNestedLayoutRoute._addFileChildren(
    SharedLayoutNestedLayoutRouteChildren,
  )

interface SharedLayoutRouteChildren {
  SharedLayoutNestedLayoutRoute: typeof SharedLayoutNestedLayoutRouteWithChildren
}

const SharedLayoutRouteChildren: SharedLayoutRouteChildren = {
  SharedLayoutNestedLayoutRoute: SharedLayoutNestedLayoutRouteWithChildren,
}

const SharedLayoutRouteWithChildren = SharedLayoutRoute._addFileChildren(
  SharedLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof SharedLayoutNestedLayoutRouteWithChildren
  '/incidents': typeof ProtectedIncidentsRouteRoute
  '/live': typeof ProtectedLiveRouteRoute
  '/users': typeof ProtectedUsersRouteRouteWithChildren
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '/deferred': typeof ProtectedDeferredRoute
  '/': typeof ProtectedIndexRoute
  '/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/users/': typeof ProtectedUsersIndexRoute
  '/users/$userId': typeof ProtectedUsersUserIdIndexRoute
}

export interface FileRoutesByTo {
  '': typeof SharedLayoutNestedLayoutRouteWithChildren
  '/incidents': typeof ProtectedIncidentsRouteRoute
  '/live': typeof ProtectedLiveRouteRoute
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '/deferred': typeof ProtectedDeferredRoute
  '/': typeof ProtectedIndexRoute
  '/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/users': typeof ProtectedUsersIndexRoute
  '/users/$userId': typeof ProtectedUsersUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_sharedLayout': typeof SharedLayoutRouteWithChildren
  '/_protected/incidents': typeof ProtectedIncidentsRouteRoute
  '/_protected/live': typeof ProtectedLiveRouteRoute
  '/_protected/users': typeof ProtectedUsersRouteRouteWithChildren
  '/_public/access-denied': typeof PublicAccessDeniedRouteRoute
  '/_public/login': typeof PublicLoginRouteRoute
  '/_protected/deferred': typeof ProtectedDeferredRoute
  '/_sharedLayout/_nested-layout': typeof SharedLayoutNestedLayoutRouteWithChildren
  '/_protected/': typeof ProtectedIndexRoute
  '/_sharedLayout/_nested-layout/route-a': typeof SharedLayoutNestedLayoutRouteARoute
  '/_sharedLayout/_nested-layout/route-b': typeof SharedLayoutNestedLayoutRouteBRoute
  '/_protected/users/': typeof ProtectedUsersIndexRoute
  '/_protected/users/$userId/': typeof ProtectedUsersUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/incidents'
    | '/live'
    | '/users'
    | '/access-denied'
    | '/login'
    | '/deferred'
    | '/'
    | '/route-a'
    | '/route-b'
    | '/users/'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/incidents'
    | '/live'
    | '/access-denied'
    | '/login'
    | '/deferred'
    | '/'
    | '/route-a'
    | '/route-b'
    | '/users'
    | '/users/$userId'
  id:
    | '__root__'
    | '/_protected'
    | '/_sharedLayout'
    | '/_protected/incidents'
    | '/_protected/live'
    | '/_protected/users'
    | '/_public/access-denied'
    | '/_public/login'
    | '/_protected/deferred'
    | '/_sharedLayout/_nested-layout'
    | '/_protected/'
    | '/_sharedLayout/_nested-layout/route-a'
    | '/_sharedLayout/_nested-layout/route-b'
    | '/_protected/users/'
    | '/_protected/users/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  SharedLayoutRoute: typeof SharedLayoutRouteWithChildren
  PublicAccessDeniedRouteRoute: typeof PublicAccessDeniedRouteRoute
  PublicLoginRouteRoute: typeof PublicLoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  SharedLayoutRoute: SharedLayoutRouteWithChildren,
  PublicAccessDeniedRouteRoute: PublicAccessDeniedRouteRoute,
  PublicLoginRouteRoute: PublicLoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_sharedLayout",
        "/_public/access-denied",
        "/_public/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/incidents",
        "/_protected/live",
        "/_protected/users",
        "/_protected/deferred",
        "/_protected/"
      ]
    },
    "/_sharedLayout": {
      "filePath": "_sharedLayout.tsx",
      "children": [
        "/_sharedLayout/_nested-layout"
      ]
    },
    "/_protected/incidents": {
      "filePath": "_protected/incidents/route.tsx",
      "parent": "/_protected"
    },
    "/_protected/live": {
      "filePath": "_protected/live/route.tsx",
      "parent": "/_protected"
    },
    "/_protected/users": {
      "filePath": "_protected/users/route.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/users/",
        "/_protected/users/$userId/"
      ]
    },
    "/_public/access-denied": {
      "filePath": "_public/access-denied/route.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login/route.tsx"
    },
    "/_protected/deferred": {
      "filePath": "_protected/deferred.tsx",
      "parent": "/_protected"
    },
    "/_sharedLayout/_nested-layout": {
      "filePath": "_sharedLayout/_nested-layout.tsx",
      "parent": "/_sharedLayout",
      "children": [
        "/_sharedLayout/_nested-layout/route-a",
        "/_sharedLayout/_nested-layout/route-b"
      ]
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    },
    "/_sharedLayout/_nested-layout/route-a": {
      "filePath": "_sharedLayout/_nested-layout/route-a.tsx",
      "parent": "/_sharedLayout/_nested-layout"
    },
    "/_sharedLayout/_nested-layout/route-b": {
      "filePath": "_sharedLayout/_nested-layout/route-b.tsx",
      "parent": "/_sharedLayout/_nested-layout"
    },
    "/_protected/users/": {
      "filePath": "_protected/users/index.tsx",
      "parent": "/_protected/users"
    },
    "/_protected/users/$userId/": {
      "filePath": "_protected/users/$userId/index.tsx",
      "parent": "/_protected/users"
    }
  }
}
ROUTE_MANIFEST_END */
