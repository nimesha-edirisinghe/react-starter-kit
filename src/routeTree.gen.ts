/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as DeferredImport } from './routes/deferred'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as IndexImport } from './routes/index'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PublicLoginRouteImport } from './routes/_public/login/route'
import { Route as ProtectedUsersRouteImport } from './routes/_protected/users/route'
import { Route as ProtectedPostsRouteImport } from './routes/_protected/posts/route'
import { Route as ProtectedUsersIndexImport } from './routes/_protected/users/index'
import { Route as ProtectedPostsIndexImport } from './routes/_protected/posts/index'
import { Route as ProtectedUsersUserIdImport } from './routes/_protected/users/$userId'
import { Route as ProtectedPostsPostIdImport } from './routes/_protected/posts/$postId'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as ProtectedPostsPostIdDeepImport } from './routes/_protected/posts/_.$postId.deep'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const PublicLoginRouteRoute = PublicLoginRouteImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedUsersRouteRoute = ProtectedUsersRouteImport.update({
  id: '/_protected/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedPostsRouteRoute = ProtectedPostsRouteImport.update({
  id: '/_protected/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedUsersIndexRoute = ProtectedUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedUsersRouteRoute,
} as any)

const ProtectedPostsIndexRoute = ProtectedPostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedPostsRouteRoute,
} as any)

const ProtectedUsersUserIdRoute = ProtectedUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ProtectedUsersRouteRoute,
} as any)

const ProtectedPostsPostIdRoute = ProtectedPostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => ProtectedPostsRouteRoute,
} as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const ProtectedPostsPostIdDeepRoute = ProtectedPostsPostIdDeepImport.update({
  id: '/_/$postId/deep',
  path: '/$postId/deep',
  getParentRoute: () => ProtectedPostsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/_protected/posts': {
      id: '/_protected/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ProtectedPostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/users': {
      id: '/_protected/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ProtectedUsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_protected/posts/$postId': {
      id: '/_protected/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof ProtectedPostsPostIdImport
      parentRoute: typeof ProtectedPostsRouteImport
    }
    '/_protected/users/$userId': {
      id: '/_protected/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof ProtectedUsersUserIdImport
      parentRoute: typeof ProtectedUsersRouteImport
    }
    '/_protected/posts/': {
      id: '/_protected/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof ProtectedPostsIndexImport
      parentRoute: typeof ProtectedPostsRouteImport
    }
    '/_protected/users/': {
      id: '/_protected/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof ProtectedUsersIndexImport
      parentRoute: typeof ProtectedUsersRouteImport
    }
    '/_protected/posts/_/$postId/deep': {
      id: '/_protected/posts/_/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof ProtectedPostsPostIdDeepImport
      parentRoute: typeof ProtectedPostsRouteImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface ProtectedPostsRouteRouteChildren {
  ProtectedPostsPostIdRoute: typeof ProtectedPostsPostIdRoute
  ProtectedPostsIndexRoute: typeof ProtectedPostsIndexRoute
  ProtectedPostsPostIdDeepRoute: typeof ProtectedPostsPostIdDeepRoute
}

const ProtectedPostsRouteRouteChildren: ProtectedPostsRouteRouteChildren = {
  ProtectedPostsPostIdRoute: ProtectedPostsPostIdRoute,
  ProtectedPostsIndexRoute: ProtectedPostsIndexRoute,
  ProtectedPostsPostIdDeepRoute: ProtectedPostsPostIdDeepRoute,
}

const ProtectedPostsRouteRouteWithChildren =
  ProtectedPostsRouteRoute._addFileChildren(ProtectedPostsRouteRouteChildren)

interface ProtectedUsersRouteRouteChildren {
  ProtectedUsersUserIdRoute: typeof ProtectedUsersUserIdRoute
  ProtectedUsersIndexRoute: typeof ProtectedUsersIndexRoute
}

const ProtectedUsersRouteRouteChildren: ProtectedUsersRouteRouteChildren = {
  ProtectedUsersUserIdRoute: ProtectedUsersUserIdRoute,
  ProtectedUsersIndexRoute: ProtectedUsersIndexRoute,
}

const ProtectedUsersRouteRouteWithChildren =
  ProtectedUsersRouteRoute._addFileChildren(ProtectedUsersRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/posts': typeof ProtectedPostsRouteRouteWithChildren
  '/users': typeof ProtectedUsersRouteRouteWithChildren
  '/login': typeof PublicLoginRouteRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId': typeof ProtectedPostsPostIdRoute
  '/users/$userId': typeof ProtectedUsersUserIdRoute
  '/posts/': typeof ProtectedPostsIndexRoute
  '/users/': typeof ProtectedUsersIndexRoute
  '/posts/$postId/deep': typeof ProtectedPostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/login': typeof PublicLoginRouteRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId': typeof ProtectedPostsPostIdRoute
  '/users/$userId': typeof ProtectedUsersUserIdRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/users': typeof ProtectedUsersIndexRoute
  '/posts/$postId/deep': typeof ProtectedPostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/_protected/posts': typeof ProtectedPostsRouteRouteWithChildren
  '/_protected/users': typeof ProtectedUsersRouteRouteWithChildren
  '/_public/login': typeof PublicLoginRouteRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/_protected/posts/$postId': typeof ProtectedPostsPostIdRoute
  '/_protected/users/$userId': typeof ProtectedUsersUserIdRoute
  '/_protected/posts/': typeof ProtectedPostsIndexRoute
  '/_protected/users/': typeof ProtectedUsersIndexRoute
  '/_protected/posts/_/$postId/deep': typeof ProtectedPostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/deferred'
    | '/redirect'
    | '/posts'
    | '/users'
    | '/login'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/deferred'
    | '/redirect'
    | '/login'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/deferred'
    | '/redirect'
    | '/_protected/posts'
    | '/_protected/users'
    | '/_public/login'
    | '/_pathlessLayout/_nested-layout'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/_protected/posts/$postId'
    | '/_protected/users/$userId'
    | '/_protected/posts/'
    | '/_protected/users/'
    | '/_protected/posts/_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  ProtectedPostsRouteRoute: typeof ProtectedPostsRouteRouteWithChildren
  ProtectedUsersRouteRoute: typeof ProtectedUsersRouteRouteWithChildren
  PublicLoginRouteRoute: typeof PublicLoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  ProtectedPostsRouteRoute: ProtectedPostsRouteRouteWithChildren,
  ProtectedUsersRouteRoute: ProtectedUsersRouteRouteWithChildren,
  PublicLoginRouteRoute: PublicLoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathlessLayout",
        "/deferred",
        "/redirect",
        "/_protected/posts",
        "/_protected/users",
        "/_public/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/_protected/posts": {
      "filePath": "_protected/posts/route.tsx",
      "children": [
        "/_protected/posts/$postId",
        "/_protected/posts/",
        "/_protected/posts/_/$postId/deep"
      ]
    },
    "/_protected/users": {
      "filePath": "_protected/users/route.tsx",
      "children": [
        "/_protected/users/$userId",
        "/_protected/users/"
      ]
    },
    "/_public/login": {
      "filePath": "_public/login/route.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_protected/posts/$postId": {
      "filePath": "_protected/posts/$postId.tsx",
      "parent": "/_protected/posts"
    },
    "/_protected/users/$userId": {
      "filePath": "_protected/users/$userId.tsx",
      "parent": "/_protected/users"
    },
    "/_protected/posts/": {
      "filePath": "_protected/posts/index.tsx",
      "parent": "/_protected/posts"
    },
    "/_protected/users/": {
      "filePath": "_protected/users/index.tsx",
      "parent": "/_protected/users"
    },
    "/_protected/posts/_/$postId/deep": {
      "filePath": "_protected/posts/_.$postId.deep.tsx",
      "parent": "/_protected/posts"
    }
  }
}
ROUTE_MANIFEST_END */
