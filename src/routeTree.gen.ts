/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login/route'
import { Route as PublicAccessDeniedRouteImport } from './routes/_public/access-denied/route'
import { Route as ProtectedLiveRouteImport } from './routes/_protected/live/route'
import { Route as ProtectedIncidentsRouteImport } from './routes/_protected/incidents/route'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const PublicLoginRouteRoute = PublicLoginRouteImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PublicAccessDeniedRouteRoute = PublicAccessDeniedRouteImport.update({
  id: '/_public/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedLiveRouteRoute = ProtectedLiveRouteImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedIncidentsRouteRoute = ProtectedIncidentsRouteImport.update({
  id: '/incidents',
  path: '/incidents',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/incidents': {
      id: '/_protected/incidents'
      path: '/incidents'
      fullPath: '/incidents'
      preLoaderRoute: typeof ProtectedIncidentsRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/live': {
      id: '/_protected/live'
      path: '/live'
      fullPath: '/live'
      preLoaderRoute: typeof ProtectedLiveRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/access-denied': {
      id: '/_public/access-denied'
      path: '/access-denied'
      fullPath: '/access-denied'
      preLoaderRoute: typeof PublicAccessDeniedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedIncidentsRouteRoute: typeof ProtectedIncidentsRouteRoute
  ProtectedLiveRouteRoute: typeof ProtectedLiveRouteRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIncidentsRouteRoute: ProtectedIncidentsRouteRoute,
  ProtectedLiveRouteRoute: ProtectedLiveRouteRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/incidents': typeof ProtectedIncidentsRouteRoute
  '/live': typeof ProtectedLiveRouteRoute
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesByTo {
  '/incidents': typeof ProtectedIncidentsRouteRoute
  '/live': typeof ProtectedLiveRouteRoute
  '/access-denied': typeof PublicAccessDeniedRouteRoute
  '/login': typeof PublicLoginRouteRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/incidents': typeof ProtectedIncidentsRouteRoute
  '/_protected/live': typeof ProtectedLiveRouteRoute
  '/_public/access-denied': typeof PublicAccessDeniedRouteRoute
  '/_public/login': typeof PublicLoginRouteRoute
  '/_protected/': typeof ProtectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/incidents' | '/live' | '/access-denied' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/incidents' | '/live' | '/access-denied' | '/login' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/incidents'
    | '/_protected/live'
    | '/_public/access-denied'
    | '/_public/login'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicAccessDeniedRouteRoute: typeof PublicAccessDeniedRouteRoute
  PublicLoginRouteRoute: typeof PublicLoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicAccessDeniedRouteRoute: PublicAccessDeniedRouteRoute,
  PublicLoginRouteRoute: PublicLoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public/access-denied",
        "/_public/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/incidents",
        "/_protected/live",
        "/_protected/"
      ]
    },
    "/_protected/incidents": {
      "filePath": "_protected/incidents/route.tsx",
      "parent": "/_protected"
    },
    "/_protected/live": {
      "filePath": "_protected/live/route.tsx",
      "parent": "/_protected"
    },
    "/_public/access-denied": {
      "filePath": "_public/access-denied/route.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login/route.tsx"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
